uniform vec3			u_viewOriginES;
uniform vec3 			u_LightOrg;
uniform float			u_fogDensity;
uniform mat4			u_attenMatrix;
uniform mat4			u_cubeMatrix;
uniform int				u_parallaxType;

out vec3			v_viewVecTS;
out vec3 			v_lightVec;
out vec2			v_texCoord; 
out vec4			v_CubeCoord;
out vec4			v_AttenCoord;
out vec3			v_positionVS;

in vec3			a_tangent;
in vec3			a_binormal;
in vec3			a_normArray;
in vec3			a_vertArray;
in vec2			a_texCoord;

void main (void) {
	// setup tex coords
	v_texCoord = a_texCoord;  // diffuse & bump
	v_CubeCoord = u_cubeMatrix * vec4(a_vertArray, 1.0);
	v_AttenCoord = u_attenMatrix * vec4(a_vertArray, 1.0);

	// calculate tangent space view vector for parallax
	vec3 tmp = u_viewOriginES - a_vertArray;
	v_viewVecTS.x = dot(tmp, a_tangent);
	v_viewVecTS.y = dot(tmp, a_binormal);
	v_viewVecTS.z = dot(tmp, a_normArray);

	vec3 LV = u_LightOrg - a_vertArray;
	v_lightVec.x = dot(a_tangent, LV);
	v_lightVec.y = dot(a_binormal, LV);
	v_lightVec.z = dot(a_normArray, LV); 

	gl_Position = gl_ModelViewProjectionMatrix * vec4(a_vertArray, 1.0);
}
