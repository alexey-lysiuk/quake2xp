uniform vec3	u_viewOriginES;
uniform vec3 	u_LightOrg;
uniform float	u_fogDensity;
uniform float	u_scroll;
uniform mat4	u_attenMatrix;
uniform mat4	u_spotMatrix;
uniform mat4	u_cubeMatrix;
uniform mat4	u_modelViewProjectionMatrix;
uniform int		u_parallaxType;

out vec3		v_viewVecTS;
out vec3 		v_lightVec;
out vec2		v_texCoord; 
out vec4		v_CubeCoord;
out vec4		v_AttenCoord;
out vec3		v_positionVS;
out vec3		v_lightAtten;
out vec3		v_lightSpot;

layout(location = 0) in vec3 att_position;
layout(location = 1) in vec3 att_normal;
layout(location = 2) in vec3 att_tangent;
layout(location = 3) in vec3 att_binormal;
layout(location = 5) in vec2 att_texCoordDiffuse;

void main (void) {
	// setup tex coords
	v_texCoord		= att_texCoordDiffuse;  // diffuse & bump
	v_texCoord		+= u_scroll;
	v_CubeCoord		= u_cubeMatrix * vec4(att_position, 1.0);
	v_lightAtten	= (u_attenMatrix * vec4(att_position, 1.0)).xyz;
	v_lightSpot		= (u_spotMatrix * vec4(att_position, 1.0)).xyz;

	// calculate tangent space view vector for parallax
	vec3 tmp = u_viewOriginES - att_position;
	v_viewVecTS.x = dot(tmp, att_tangent);
	v_viewVecTS.y = dot(tmp, att_binormal);
	v_viewVecTS.z = dot(tmp, att_normal);

	vec3 LV = u_LightOrg - att_position;
	v_lightVec.x = dot(att_tangent, LV);
	v_lightVec.y = dot(att_binormal, LV);
	v_lightVec.z = dot(att_normal, LV); 

	gl_Position = u_modelViewProjectionMatrix * vec4(att_position, 1.0);
}
