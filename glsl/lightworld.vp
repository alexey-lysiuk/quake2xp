//calc view angles
uniform vec3			u_viewOriginES;
uniform vec3			u_LightOrg;
uniform float			u_LightRadius;
varying vec3			v_viewVecTS;
varying vec3			v_lightVec;

varying vec2			v_wTexCoord;
varying vec2			v_lTexCoord;
varying vec4			v_color;

attribute vec3			a_tangent;
attribute vec3			a_binormal;
attribute vec3			a_vertArray;
attribute vec3			a_normArray;
attribute vec2			a_texCoord;
attribute vec4			a_colorArray;

void main ()
{
// setup tex coords
v_wTexCoord = a_texCoord;

// calculate tangent space view vector for parallax
vec3 tmp = u_viewOriginES - a_vertArray;
v_viewVecTS.x = dot(tmp, a_tangent);
v_viewVecTS.y = dot(tmp, a_binormal);
v_viewVecTS.z = dot(tmp, a_normArray);

vec3 LV;
LV = u_LightOrg - a_vertArray;
v_lightVec.x = dot(a_tangent, LV);
v_lightVec.y = dot(a_binormal, LV);
v_lightVec.z = dot(a_normArray, LV); 

gl_Position = gl_ModelViewProjectionMatrix * vec4(a_vertArray, 1.0);
v_color = a_colorArray;
}
