uniform vec3		u_viewOriginES;
uniform int			u_parallaxType;
uniform int			u_LightMapType;
uniform mat4		u_modelViewProjectionMatrix;

out vec3		v_viewVecTS;
out vec2		v_wTexCoord;
out vec2		v_lTexCoord;
out vec2		v_envCoord;

layout(location = 0) in vec3	att_position;
layout(location = 1) in vec3	att_normal;
layout(location = 2) in vec3	att_tangent;
layout(location = 3) in vec3	att_binormal;
layout(location = 5) in vec2	att_texCoordDiffuse;
layout(location = 6) in vec2	att_texCoordLightMap;

void main (void) {
	// setup tex coords
	v_wTexCoord = att_texCoordDiffuse;  // diffuse, additive, caustics
	v_lTexCoord = att_texCoordLightMap; // lightmap only

	// calculate tangent space view vector for parallax
	vec3 tmp = u_viewOriginES - att_position;
	
	v_viewVecTS.x = dot(tmp, att_tangent);
	v_viewVecTS.y = dot(tmp, att_binormal);
	v_viewVecTS.z = dot(tmp, att_normal);

	gl_Position = u_modelViewProjectionMatrix * vec4(att_position, 1.0);
}
