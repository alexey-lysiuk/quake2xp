//calc view angles
uniform vec3			u_viewOriginES;
uniform vec3			u_LightOrg[13];
uniform int				u_numLights;
uniform float			u_LightRadius[13];
varying vec3			v_viewVecTS;
varying vec3			v_lightVec[13];

varying vec3 			t, b, n;
varying vec2			v_wTexCoord;
varying vec2			v_lTexCoord;
varying vec4			v_color;

attribute vec3			a_tangent;
attribute vec3			a_binormal;
attribute vec2			a_texCoord;
attribute vec2			a_LtexCoord;
attribute vec3			a_vertArray;
attribute vec3			a_normArray;
attribute vec4			a_colorArray;

void main ()
{
// setup tex coords
v_wTexCoord = a_texCoord;  // diffuse, addative, caustics
v_lTexCoord = a_LtexCoord; // lightmap only

// calculate tangent space view vector for parallax
vec3 tmp = u_viewOriginES - a_vertArray;
v_viewVecTS.x = dot(tmp, a_tangent);
v_viewVecTS.y = dot(tmp, a_binormal);
v_viewVecTS.z = dot(tmp, a_normArray);

#ifdef BUMP
t = a_tangent;
b = a_binormal;
n = a_normArray;

if(u_numLights <= 13 && u_numLights > 0){
	
vec3 LV;
if(u_numLights >= 1 && u_LightRadius[0] >=1){
LV = u_LightOrg[0] - a_vertArray;
v_lightVec[0].x = dot(a_tangent, LV);
v_lightVec[0].y = dot(a_binormal, LV);
v_lightVec[0].z = dot(a_normArray, LV); 
}
if(u_numLights >= 2 && u_LightRadius[1] >=1){
LV = u_LightOrg[1] - a_vertArray;
v_lightVec[1].x = dot(a_tangent, LV);
v_lightVec[1].y = dot(a_binormal, LV);
v_lightVec[1].z = dot(a_normArray, LV); 
}
if(u_numLights >= 3 && u_LightRadius[2] >=1){
LV = u_LightOrg[2] - a_vertArray;
v_lightVec[2].x = dot(a_tangent, LV);
v_lightVec[2].y = dot(a_binormal, LV);
v_lightVec[2].z = dot(a_normArray, LV); 
}
if(u_numLights >= 4 && u_LightRadius[3] >=1){
LV = u_LightOrg[3] - a_vertArray;
v_lightVec[3].x = dot(a_tangent, LV);
v_lightVec[3].y = dot(a_binormal, LV);
v_lightVec[3].z = dot(a_normArray, LV); 
}
if(u_numLights >= 5 && u_LightRadius[4] >=1){
LV = u_LightOrg[4] - a_vertArray;
v_lightVec[4].x = dot(a_tangent, LV);
v_lightVec[4].y = dot(a_binormal, LV);
v_lightVec[4].z = dot(a_normArray, LV); 
}
if(u_numLights >= 6 && u_LightRadius[5] >=1){
LV = u_LightOrg[5] - a_vertArray;
v_lightVec[5].x = dot(a_tangent, LV);
v_lightVec[5].y = dot(a_binormal, LV);
v_lightVec[5].z = dot(a_normArray, LV); 
}
if(u_numLights >= 7 && u_LightRadius[6] >=1){
LV = u_LightOrg[6] - a_vertArray;
v_lightVec[6].x = dot(a_tangent, LV);
v_lightVec[6].y = dot(a_binormal, LV);
v_lightVec[6].z = dot(a_normArray, LV); 
}
if(u_numLights >= 8 && u_LightRadius[7] >=1){
LV = u_LightOrg[7] - a_vertArray;
v_lightVec[7].x = dot(a_tangent, LV);
v_lightVec[7].y = dot(a_binormal, LV);
v_lightVec[7].z = dot(a_normArray, LV); 
}
if(u_numLights >= 9 && u_LightRadius[8] >=1){
LV = u_LightOrg[8] - a_vertArray;
v_lightVec[8].x = dot(a_tangent, LV);
v_lightVec[8].y = dot(a_binormal, LV);
v_lightVec[8].z = dot(a_normArray, LV); 
}
if(u_numLights >= 10 && u_LightRadius[9] >=1){
LV = u_LightOrg[9] - a_vertArray;
v_lightVec[9].x = dot(a_tangent, LV);
v_lightVec[9].y = dot(a_binormal, LV);
v_lightVec[9].z = dot(a_normArray, LV); 
}
if(u_numLights >= 11 && u_LightRadius[10] >=1){
LV = u_LightOrg[10] - a_vertArray;
v_lightVec[10].x = dot(a_tangent, LV);
v_lightVec[10].y = dot(a_binormal, LV);
v_lightVec[10].z = dot(a_normArray, LV); 
}
if(u_numLights >= 12 && u_LightRadius[11] >=1){
LV = u_LightOrg[11] - a_vertArray;
v_lightVec[11].x = dot(a_tangent, LV);
v_lightVec[11].y = dot(a_binormal, LV);
v_lightVec[11].z = dot(a_normArray, LV); 
}
if(u_numLights == 13 && u_LightRadius[12] >=1){
LV = u_LightOrg[12] - a_vertArray;
v_lightVec[12].x = dot(a_tangent, LV);
v_lightVec[12].y = dot(a_binormal, LV);
v_lightVec[12].z = dot(a_normArray, LV); 
}
}
#endif

gl_Position = gl_ModelViewProjectionMatrix * vec4(a_vertArray, 1.0);
v_color = a_colorArray;
}
