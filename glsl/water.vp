out vec2		v_deformTexCoord;
out vec2		v_diffuseTexCoord;
out vec2		v_deformMul;
out vec3		v_positionVS;
out mat3		v_tangentToView;
out vec4		v_color;

uniform float		u_deformMul;
uniform int			u_TRANS;

in vec3		a_vertArray;
in vec3		a_normArray;
in vec3		a_tangent;
in vec3		a_binormal;
in vec2		a_texCoord;
in vec2		a_2texCoord;
in vec4		a_colorArray;

void main (void) {
	v_diffuseTexCoord = a_texCoord;
	v_deformTexCoord = a_2texCoord;

	vec4 pos = gl_ModelViewMatrix * vec4(a_vertArray, 1.0);
	v_positionVS = pos.xyz;

	mat3 m = mat3(gl_ModelViewMatrix);

	if (u_TRANS == 1) {
		// compute view space depth
		pos = vec4(1.0, 0.0, pos.z, 1.0);
		// compute the deform strength
		vec2 d = (gl_ProjectionMatrix * pos).xw;
		d.x /= max(d.y, 1.0);
		v_deformMul = min(d.xx, 0.02) * u_deformMul;
		v_color = a_colorArray;
	}

	// calculate tangent to view space transform
	v_tangentToView[0] = m * a_tangent;
	v_tangentToView[1] = m * a_binormal;
	v_tangentToView[2] = m * a_normArray;

	gl_Position = gl_ModelViewProjectionMatrix * vec4(a_vertArray, 1.0);
}
